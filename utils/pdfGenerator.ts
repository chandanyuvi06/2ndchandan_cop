import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';
import firestore from '@react-native-firebase/firestore';
import auth from '@react-native-firebase/auth';

interface ColdRoomData {
  type: 'coldroom' | 'freezer' | 'blastfreezer';
  roomData: any;
  conditionsData: any;
  constructionData?: any;
  productData: any;
  usageData?: any;
  calculationResults: any;
}

export async function generateAndSharePDF(data: ColdRoomData) {
  try {
    // Save data to Firebase first
    const user = auth().currentUser;
    if (user) {
      const projectData = {
        userId: user.uid,
        type: data.type,
        roomData: data.roomData,
        conditionsData: data.conditionsData,
        constructionData: data.constructionData,
        productData: data.productData,
        usageData: data.usageData,
        calculationResults: data.calculationResults,
        createdAt: firestore.FieldValue.serverTimestamp(),
      };

      await firestore().collection('projects').add(projectData);
    }

    // Generate PDF content
    const htmlContent = generatePDFHTML(data);
    
    // Create PDF
    const { uri } = await Print.printToFileAsync({
      html: htmlContent,
      base64: false,
    });

    // Share PDF
    if (await Sharing.isAvailableAsync()) {
      await Sharing.shareAsync(uri, {
        mimeType: 'application/pdf',
        dialogTitle: `${data.type.charAt(0).toUpperCase() + data.type.slice(1)} Calculation Report`,
      });
    }

    return uri;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
}

function generatePDFHTML(data: ColdRoomData): string {
  const { type, roomData, conditionsData, productData, calculationResults } = data;
  
  const title = type === 'coldroom' ? 'Cold Room' : 
                type === 'freezer' ? 'Freezer' : 'Blast Freezer';

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>${title} Calculation Report</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 20px;
          color: #333;
          line-height: 1.6;
        }
        .header {
          text-align: center;
          border-bottom: 2px solid #3B82F6;
          padding-bottom: 20px;
          margin-bottom: 30px;
        }
        .title {
          color: #1E3A8A;
          font-size: 28px;
          font-weight: bold;
          margin-bottom: 10px;
        }
        .subtitle {
          color: #64748B;
          font-size: 16px;
        }
        .section {
          margin-bottom: 25px;
          page-break-inside: avoid;
        }
        .section-title {
          color: #1E3A8A;
          font-size: 18px;
          font-weight: bold;
          margin-bottom: 15px;
          border-left: 4px solid #3B82F6;
          padding-left: 12px;
        }
        .data-grid {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 15px;
          margin-bottom: 20px;
        }
        .data-item {
          background: #F8FAFC;
          padding: 12px;
          border-radius: 8px;
          border-left: 3px solid #3B82F6;
        }
        .data-label {
          font-weight: bold;
          color: #1E3A8A;
          font-size: 14px;
        }
        .data-value {
          color: #64748B;
          font-size: 16px;
          margin-top: 4px;
        }
        .results-table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 15px;
        }
        .results-table th,
        .results-table td {
          border: 1px solid #E5E7EB;
          padding: 12px;
          text-align: left;
        }
        .results-table th {
          background: #F1F5F9;
          font-weight: bold;
          color: #1E3A8A;
        }
        .total-row {
          background: #EBF8FF;
          font-weight: bold;
        }
        .footer {
          margin-top: 40px;
          text-align: center;
          color: #64748B;
          font-size: 12px;
          border-top: 1px solid #E5E7EB;
          padding-top: 20px;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="title">${title} Calculation Report</div>
        <div class="subtitle">Generated by Enzo CoolCalc</div>
        <div class="subtitle">Date: ${new Date().toLocaleDateString()}</div>
      </div>

      <div class="section">
        <div class="section-title">Room Specifications</div>
        <div class="data-grid">
          <div class="data-item">
            <div class="data-label">Length</div>
            <div class="data-value">${parseFloat(roomData.length || roomData.length).toFixed(2)} m</div>
          </div>
          <div class="data-item">
            <div class="data-label">${type === 'blastfreezer' ? 'Breadth' : 'Width'}</div>
            <div class="data-value">${parseFloat(roomData.breadth || roomData.width).toFixed(2)} m</div>
          </div>
          <div class="data-item">
            <div class="data-label">Height</div>
            <div class="data-value">${parseFloat(roomData.height).toFixed(2)} m</div>
          </div>
          <div class="data-item">
            <div class="data-label">Volume</div>
            <div class="data-value">${calculationResults.volume?.toFixed(2) || 'N/A'} m³</div>
          </div>
          <div class="data-item">
            <div class="data-label">Door Size</div>
            <div class="data-value">${parseFloat(roomData.doorWidth).toFixed(2)} × ${parseFloat(roomData.doorHeight).toFixed(2)} m</div>
          </div>
        </div>
      </div>

      <div class="section">
        <div class="section-title">Operating Conditions</div>
        <div class="data-grid">
          <div class="data-item">
            <div class="data-label">${type === 'blastfreezer' ? 'Ambient' : 'External'} Temperature</div>
            <div class="data-value">${parseFloat(conditionsData.ambientTemp || conditionsData.externalTemp).toFixed(1)}°C</div>
          </div>
          <div class="data-item">
            <div class="data-label">${type === 'blastfreezer' ? 'Room' : 'Internal'} Temperature</div>
            <div class="data-value">${parseFloat(conditionsData.roomTemp || conditionsData.internalTemp).toFixed(1)}°C</div>
          </div>
          <div class="data-item">
            <div class="data-label">Temperature Difference</div>
            <div class="data-value">${calculationResults.temperatureDifference?.toFixed(1) || 'N/A'}°C</div>
          </div>
          <div class="data-item">
            <div class="data-label">Operating Hours</div>
            <div class="data-value">${parseFloat(conditionsData.operatingHours).toFixed(0)} hrs/day</div>
          </div>
        </div>
      </div>

      <div class="section">
        <div class="section-title">Product Information</div>
        <div class="data-grid">
          <div class="data-item">
            <div class="data-label">Product Type</div>
            <div class="data-value">${productData.productType}</div>
          </div>
          <div class="data-item">
            <div class="data-label">${type === 'blastfreezer' ? 'Capacity Required' : 'Daily Load'}</div>
            <div class="data-value">${parseFloat(productData.capacityRequired || productData.dailyLoad).toFixed(0)} kg</div>
          </div>
          <div class="data-item">
            <div class="data-label">Incoming Temperature</div>
            <div class="data-value">${parseFloat(productData.incomingTemp).toFixed(1)}°C</div>
          </div>
          <div class="data-item">
            <div class="data-label">Outgoing Temperature</div>
            <div class="data-value">${parseFloat(productData.outgoingTemp).toFixed(1)}°C</div>
          </div>
        </div>
      </div>

      <div class="section">
        <div class="section-title">Cooling Load Breakdown</div>
        <table class="results-table">
          <thead>
            <tr>
              <th>Load Component</th>
              <th>Load (kW)</th>
              <th>Load (TR)</th>
            </tr>
          </thead>
          <tbody>
            ${generateLoadBreakdownRows(calculationResults, type)}
            <tr class="total-row">
              <td><strong>Total Cooling Load</strong></td>
              <td><strong>${(calculationResults.finalLoad || calculationResults.totalLoadWithSafety || 0).toFixed(2)} kW</strong></td>
              <td><strong>${((calculationResults.finalLoad || calculationResults.totalLoadWithSafety || 0) / 3.517).toFixed(2)} TR</strong></td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="footer">
        <p>Generated by Enzo CoolCalc - Professional Refrigeration Load Calculator</p>
        <p>This report contains calculated cooling loads based on the provided specifications.</p>
      </div>
    </body>
    </html>
  `;
}

function generateLoadBreakdownRows(results: any, type: string): string {
  let rows = '';
  
  if (results.breakdown) {
    const breakdown = results.breakdown;
    
    // Transmission load
    if (breakdown.transmission) {
      const transmissionKW = breakdown.transmission.total || 0;
      rows += `
        <tr>
          <td>Transmission Load</td>
          <td>${transmissionKW.toFixed(2)}</td>
          <td>${(transmissionKW / 3.517).toFixed(2)}</td>
        </tr>
      `;
    }
    
    // Product load
    if (breakdown.product) {
      const productKW = breakdown.product.total || breakdown.product || 0;
      rows += `
        <tr>
          <td>Product Load</td>
          <td>${productKW.toFixed(2)}</td>
          <td>${(productKW / 3.517).toFixed(2)}</td>
        </tr>
      `;
    }
    
    // Air change load
    if (breakdown.airChange) {
      const airKW = breakdown.airChange.load || breakdown.airChange || 0;
      rows += `
        <tr>
          <td>Air Change Load</td>
          <td>${airKW.toFixed(2)}</td>
          <td>${(airKW / 3.517).toFixed(2)}</td>
        </tr>
      `;
    }
    
    // Internal loads
    if (breakdown.internal) {
      const internalKW = breakdown.internal.total || 0;
      rows += `
        <tr>
          <td>Internal Loads</td>
          <td>${internalKW.toFixed(2)}</td>
          <td>${(internalKW / 3.517).toFixed(2)}</td>
        </tr>
      `;
    }
  }
  
  return rows;
}

export async function saveProjectData(data: ColdRoomData) {
  try {
    const user = auth().currentUser;
    if (!user) {
      throw new Error('User not authenticated');
    }

    const projectData = {
      userId: user.uid,
      type: data.type,
      roomData: data.roomData,
      conditionsData: data.conditionsData,
      constructionData: data.constructionData,
      productData: data.productData,
      usageData: data.usageData,
      calculationResults: data.calculationResults,
      createdAt: firestore.FieldValue.serverTimestamp(),
      updatedAt: firestore.FieldValue.serverTimestamp(),
    };

    const docRef = await firestore().collection('projects').add(projectData);
    return docRef.id;
  } catch (error) {
    console.error('Error saving project data:', error);
    throw error;
  }
}